Emacs, vim和vscode编辑器学习

* 为什么要学习编辑器

编辑器，顾名思义就是编辑文本的工具。给人类读的文本叫记录、备忘、日志、日记、说明文档、文章、论文、小说等一切和文字有关的东西；给机器看的就是各类语言的源代码、配置脚本、运行记录等。而一个优秀的编辑器就必须胜任处理它们所有的有关操作，包括编辑、浏览阅读、对比分析、运行纠错、把重复的工作智能化处理。甚至，只要你能想到的，它都可以方便让你找到实现的方案或者让你自行去实现。

这样看来，一个字符编辑者（因为需要编写代码，所以不仅仅只包含文字，还有数字，标点，控制符，但它们都属于字符），一个强大的编辑器，就像战士手里的枪，记者手中的相机一样重要。而你想成为大神，你也需要搭配一个经过你自己打磨，调校的编辑器。而最终的境界是手里无剑，心中有剑。

那么不是这个行业的人，需要学习编辑器吗？那就要平衡其优缺点再做决定了。缺点很明显，就是需要你花时间和精力去学习。优点有以下几点，你自己衡量：

1. 计算机只会越来越和生活紧密接触。掌握一点与计算机之间的语言还是很有必要的。而编辑器就是你和计算机沟通的途径，学点基本的不难，还是有点用的，所花的时间和精力与获得的技能比还是比较高的。
2. 了解前面几章也挺有意思，以后与朋友吹牛也有个谈资。
3. 事情都是共通的，可以和生活类比，更了解生活，也更了解内在规律。

高手和普通人的最明显的区别：高手双手不离开键盘，所有操作都是用键盘来完成的，以此最大化效率。普通人都是结合鼠标，能点点点完成的，就不想用快捷键完成。

目标：如何在一个超能力的世界里，达到世界的巅峰，神一样的存在。

到了最后，能力已经不在重要，这个世界也不在重要了，它只是我给你的一个梦想之地，是时候和这所有的能力说再见的时候了，虽然不舍，现实的生活还在等着你，脱开编辑器的世界，我们化成一个最平凡的人，再次进军计算机编程的世界。我相信，你会再一次找到巅峰，转身离去，挥一挥衣袖，不带走一片云彩。

* 编辑器简介

在圈内，Vim的称号是编辑器之神，而Emacs号称神使用的编辑器，它们和伴随着计算机的发展到如今还被广泛使用。vscode是后起之秀，它结合了如今UI的发展，友善，易上手，且功能也并不落后。都是顶级的编辑器，在我心里没有谁好谁不好，这只是平衡的结果。平衡速度、大小的轻和重，极致的定制性和UI交互性之间的关系。

就如同我做这个教程，要想受众群体多，普及的更广，我就必须事无巨细的啰嗦的一个个叙，对于知道的人，那肯定有很多的浪费时间在里面。但我尽量平衡，除了讲该知识，还会说我做教程的一些结构上的思考，如何平衡各方的得与失，让能不嫌弃我啰嗦的人也有可以讨论的点。

*** 三个编辑器都会讲吗？

答案是肯定的，在我看来，这三个都是编辑器，其实是一个整体，要想讲清楚最复杂的Emacs，另外两个也就讲清楚了，反正是学，学会原理，就能做到心中有剑，所有的编辑器在你眼里都是一样的。

而讲解的过程是先讲VIM，再Emacs，这两个都知道了，vscode再补一些细节，把本质一样，表象不一样的稍微说一下，就触类旁通，所有编辑器也都会了。

*** 标签

编辑器包含哪些元素？我们从几个角度来讨论它。

从视觉的角度来说，我们称它为UI（user interface）用户界面，这是我们对一个编辑器第一的直观印象，俗话说外行看样子，内行看门道。大部分初学者就在这里被隔绝了，看到VIM上啥都没有，按半天键盘，一点反应都不给，心里骂一句，这是啥玩意儿呀，简直反人类，就弃坑了。 而对于emacs，看上去如此简陋，一点都不好看，不符合审美，然后一看那么多设置，繁琐的不得了，反人类，弃坑。再来到vscode，嗯。。。还不错。好看又好用，和我平时用的软件体验也差不多，还有那么多插件，瞬间可玩度又上升了一个级别，不错，入坑了。

而事实上，他们是一样的啦。到如今，该研究的都研究出来了，这种最基本的功能，肯定都差不多，只是vscode更符合如今软件的标准，在内行人来看，其实那些都是摆设，不会用到，放那里还占空间，又能自定义，就自己取消掉了。其他的一些界面，需要的时候再调用出来就可以了。

但界面其实都已经优化到科学的地步了，大家都一样。我们总结出来就是：

- 顶部
    - 顶部状态栏
    - 菜单栏
    - 快捷按钮栏
    - 文件导航栏，面包屑栏
- 侧边栏
    - 左侧边栏：工具栏
    - 右侧边栏：大纲栏
- 底部状态栏
    - 底部工具栏
        - 命令操作栏
        - shell 栏
        - output
        - log
        - problem
        - debug
    - 底部状态栏 modeline

也就那么多地方了，都合理的安排满了。这些当然也可以根据你自己的需求随意排放，但这都不是必要的功能，所以这就是编辑器可以权衡取舍的地方之一了。有了就增加了软件的复杂度，和大小。大部分人也不会知道需要这类功能，知道的也不一定需要。emacs是可以控制的。

** 功能角度

这是编辑器好与坏之争的主要战场。但只要支持插件，功能就已经同质化了，就算编辑器原生不支持，也可以通过插件来支持。本质区别在于执行的效率高不高，对整个编辑器速度的影响大不大。

我们这里也把大部分基础必备功能也列出来，可以省略不看哦。需要记得太多，一下也不可能记住，等需要的时候再结合实际运用即可。无非也是用更巧妙的方法更高效的做的更好。但是你一天也用不到一次，所以你不高效的方法也浪费不了你多长时间。你只需要记住最基本的操作即可。

*** 文件类

*** 编辑类

选择

*** UI类

查找替换

窗口

寄存器，跳转

插件管理

help帮助


* 基础知识

最基本的操作，也属于抽象的方法了

移动：方向键按字符和行上下左右移动；按单词、标点、句子、段落移动。

选择：字符、单词、自己选择的区域、多个不在一个位置的相同的单词、多个句子的开头

文件处理：打开，关闭，新建、重命名、导出等操作了。

以上涉及到大量的快捷键，但其实用鼠标点都可以解决。只不过如果编辑的量足够大，双手不离开键盘会更高效。等值得你花时间去学快捷键了，你自然会去学咯。

插入、替换、剪切、删除、复制、粘贴。这是必须会的几个快捷键，不过是个有点电脑知识的人都已经会了。这也是VIM和Emacs让人觉得不舒服的地方，它们的快捷键和你平时使用的不是一个。

以上也都可以用鼠标点，在菜单栏或者快捷命令图标栏点一下就行了 。只是这个效率会更低一点，而且快捷键也不多，适用的面又广，学一下绝对划算的。是个软件都用的到。

掌握这些，你就可以将编辑器耍起来了。我们也提倡在实际应用中学习，理论结合实践。所以，先拿起最难啃的Emacs用起来。同时还要找到编辑的目标。如果你本来就是一个文字编辑者，那你就从你使用的编辑器转移到这里就行了。如果没有目标的，那么我们就给安排一个目标呗。就是Emacs的快速上手。

文件的基本操作

打开文件，保存文件，

剪切，拷贝，粘帖

buffer基本操作

CUA mode

undo/redo

取消命令C-g

帮助C-h

describe-keybinding C-h b 查看下

C-h k

C-h v

C-h f

*** buffer缓冲区和tab标签

*** pane窗格和frame框架

frame就是我们理解的window窗口，它有最小化，关闭，最大化的按钮；有自己的菜单栏，所有的布局。

pane窗格，从字面理解就是窗口中开的小格子。只是开出来编辑区和其相关的状态栏区

*** 几个编辑器自带的buffer：

scratch buffer 草稿栏

message buffer 信息栏：你可以在这里看到你之前所有的操作

warning buffer 警告栏：看到存在的问题

对于多重人格的人，如果能有个记录日志，肯定会好多哦。

*** mode line

其它软件里一般称为状态栏。

和它们的区别是，每个编辑区都可以有一个modeline，且显示各自编辑区相对应的状态信息。

*** echo area和mini buffer

它们都在mode line下面区域显示，且不会和窗格一起分开，每个frame只有一个，因为你同时只会操作一个区域，它只是显示你操作时的一些反馈。

*** minibuffer

之前讲的都是buffer和它是不一样的。它是一个很重要的区域，很多插件都会使用这个区域。可以做很多事情。

** command和快捷键

command就是一个个函数，可以是一个函数，也可以是一系列函数的组合。

快捷键是命令的绑定，可以是一个命令，我可以是一系列的命令。但一系列的命令往往会为它们重新定义一个新的函数。

函数太多，只有你想不到，没有做不到的。但好记不复杂的快捷键却是有限的。

*** emacs内建的命令

*** 插件

*** 自己写的

*** 常用插件

dired

calendar

shell

小游戏：放松一下

*** majoy mode和minor mode

一般只可以有一个majoy mode

minor mode可以全局开启，也可以设置开启条件，指定开启。

** keybindinds

基本原则：

大写的一般都是功能键

C代表ctrl；M代表meta，一般指定为alt；S代表shift；s代表super键，windows os中是win键，macOS中是command键，不过一般这个键留给操作系统的桌面环境使用。

C-x：代表按住ctrl同时按x

C-x C-f：有两种方式，先完成上述的操作，再按住ctrl，同时按f； 另一种方式按住ctrl的同时，先按x，再按f。后一种方法，对小拇指会好一点。

常用前置键：

C-x，C-s，M-x为什么是这几个，按起来方便。使用频率太高，一定要舒服最重要。

customize

init.el

*** 配置之前的准备工作，基础知识

库的服务器，使用国内的镜像服务器

版本号，不同的版本号可能会冲突

如何安装

装在哪里

如何启用它们

git的学习

下载的配置文件不能用git clone

如何备份

```bash
# 井号后面都是注释内容，不会运行。
# 备份配置文件，相当于你复制了整个文件夹，放在旁边，以防奔溃了全部还原回去
git init
git add .
git commit -m "purcell's configuration for emacs"

# 建立一个自己试验的新的有关配置文件的复制版本，专业术语叫建立新的分支，并切换到该分支
# learn_cfg_v1 是自己随便取的名字
git checkout -b learn_cfg_v1
# 可以用git branch查看一下当前文件夹的分支情况。
# 应该有两个，一开始的master主分支，和后来创建的learn_cfg_v1分支
git branch

# 此时你在这个分支中可以随意修改，实在问题搞不定，
# 你可以切回主分支，把这个分支删除掉，然后再重新创建测试的分支。
# 可以测试一下，先建立一个分支learn，再删除它
git branch learn
git branch -d learn

# 切换分支
git checkout master  # 切换到master分支上
git checkout -  # 切换到上一个分支
```

用git备份有什么好处呢？

1. 等分支复杂了以后，管理起来更直观，方便。
2. 作为小一点的修改，是不需要备份一个分支的。但也会有反悔和看看修改了什么的情况出现。而此时git就发挥出强大的作用了。
    - 每次提交都会有一个记录，会让你写一下，此次修改的情况

        ```bash

        git status  # 显示有变更的文件
        git add init.el  # init.el 是你修改的文件名
        git commit -m "comment all .el file in init.el"

        # 你可以通过git log查看你之前的提交情况，记录了你详细的提交时的情况
        git log

        ```

    - 反悔了，把修改的不要了

        ```bash
        # 撤销到指定提交的commit
        git log # 查看commit的哈希值，一个很长的数字值，记住前四位即可
        # 如果记不太清楚了
        git show 123  # “123”是随意打的数字，你记得几位输入几位，它将会把满足的列出来
        # 撤销提交，还原
        git reset --hard 12345  # 还原到该哈希值的commit提交

        # 以下备选，可以学习掌握一下。
        # 恢复暂存区的所有文件到工作区
        git checkout .

        # 把所有本地修改都放到暂存区
        git stash

        # 把git stash放到暂存区的代码拿出来
        git stash pop

        # 重置暂存区与工作区，与上一次commit保持一致
        git reset --hard

        # 撤销所有本地到指定commit修改
        git reset --hard HEAD^

        ```

    - 查看修改的细节，两次之间的对比

        ```bash
        git diff
        # 指定两次提交的哈希值
        git diff 1234 5678
        ```

*** elisp基础

内置关键字

setq setq-default

defun let

and or not

when if for unless

lambda()

message error

require

global-set-key kbd

命令名

*** 安装基础的包

搜索提示

补全


* 使用高手的配置
** 搭建好高手的配置文件
使用purcell的配置

** 最小化配置
把不想干的都先去掉，便于我们学习

** 留下基础的配置开始学习
*** 先学会走，再学跑
研究界面设置init-gui-frames.el中的配置选项。
该配置文件中包含了：
1. 在macOS系统里用C-z来最小化emacs
2. 界面的配置。包括：使用对话窗口来选择文件，使用自己的启动界面，打开tab标签栏。
3. 设置窗口尺寸和特性。
4. 设置界面透明度
5. 对于macOS中菜单栏，标题栏的位置设置
6. 设置边框线
7. 使全局字体大小的方便设置
8. 禁用鼠标

打开简化的配置：
菜单栏和快捷工具栏

tool-bar-mode 从-1改为1
menu-bar-mode 从-1改为1
这样就可以在自己迷茫时就可以愉快的在菜单里自己摸索摸索了。

不适应在底栏mini buffer中输入文件地址的，喜欢自己点同学，可以将以下两个参数设为t
(setq use-file-dialog t)
(setq use-dialog-box t)

不习惯用快捷键来切换buffer的，可以增加一条配置
(setq tab-bar-mode t)
此时，就可以用上面的tab标签来管理所有的buffer了。

如果不想强迫自己养成双手不离开键盘的习惯，可以注释掉禁止使用鼠标的参数设置。

等所有的都适应了，熟练了，可以再关掉的。

*** 让emacs变得好看一点
上一个包里的透明度快捷键为M-C-8/9/7
多按几次M-C-8,将透明度调高，可以看到背景。

更改字体大小，代码编辑默认字体大小还不错。org文档编辑中字体大小略显小，C-M-=/-用来缩放字体，也可以 按住Ctrl,转动鼠标滚轮，来缩放。

再研究init-themes
加载doom-themes的包
将默认主题设置为doom-gruvbox
将暗色主题设置为doom-gruvbox
将亮色主题设置为doom-acario-light

这样emacs瞬间是不是变得高大上了。

*** 有关编辑的所有设置
init-editing-utils.el


* 编辑器的武器库—插件

下面我们就开始讨论让编辑器强大的根源，插件。

我们对比两个有趣的例子。一个人的多重人格和终极超能力，肯定是所有人的人的首选超能力：就是吸收别人的能力变成自己的。是不是想想就很high…

从编辑器的学习中，你就会知道事情并不是这么简单，你理解了这个原理，以后和朋友开脑洞吹牛的时候就可以用起来了。

无论是人格，还是超能力，没有一个，我们就把它想象成一个正方形的层，而运用就是层与层的叠加。对于多重人格来讲，你只能有一个层在最上面，也就是现在展现的人格，而其他的人格都被覆盖在下面，展现不出来。这属于一个方向的极端。而吸收超能力，就是所有的层可以依次摆开，都在最上面，随着更多层的加入，这个正方形的面积也会越来越庞大。

这有什么问题吗？当然会有，层和层之间会有冲突。为什么不同的人格不能同时出现？一个善良的人格怎么和一个邪恶的人格同时出现？一直互相斗争吗？那在一瞬间，他还是单独的，因为彼此矛盾。超能力看起来和谐的原因，是你某时某刻你只会施展一种能力，而在对于计算机来说，就是使用一个函数。可是随着量越来越大，东西越来越多，一般就是爆体而亡的后果。（这里我没有深入讨论，大家可以自行脑洞相互冲突的能力。比如说神圣类和黑暗类肯定会有冲突）而对于计算机，第一个会冲突的就是快捷键了。还有就是越庞大，速度很越来越慢，依赖变得复杂，修改也会导致很多问题出现。

可以再提一个问题，如何打败可以吸收别人能力的能力者？

但由于获得无限能力的诱人性，使得我们研究如何避免这些缺陷变得值得。我们现在就来设计一个可行的方案来解决这个问题。

我们假设一种人格为主人格，把适合该人格的所有协调互补的超能力都赋予他这个人格。然后根据不同的敌人切换不同的人格。完美。

*** 基础知识

mode，buffer，window，frame

mode也就是层

两种完全不同的层，我们称为majoy mode，主要模式；可以互相融合的层，被称为minor mode次要模式。每一个buffer就是一种人格，我们赋予它一个主要模式，是与之匹配的很多次要模式。

先需要搭基础。有两个选择，第一个就是直接使用别人的配置，第二个，就是自己慢慢搭建。

我们必须是站在巨人的肩膀上，而且大部分人的目的也只是打造一个用起来的非常顺手的编辑器，并不是学着自己编写一个编辑器软件，或者专业做编辑器插件的程序员。所以我们down一个别人的配置。配置的选择也非常多，选择一个为个人规划的配置应该更为贴切。太过于工程化的，为了让别人可以用的更无脑，而增加了配置本身的复杂性，多了很多与配置无关的，我们就暂时放弃他们。

所以说一切都是选择呀。我们最红选择的是国人大神陈斌的配置，选择他的，正好有问题，你也可以咨询的更方便一些，没有了语言的障碍。

今天的第一步，就是让把配置下载下来，让它可用。这也是emacs魔鬼的地方，服务器在国外，会遇到各种下载问题。

老一套，首先我们还是用分类来做大致的区分：

替换记事本，gtd

org-mode

替换office，markdown

导出各类文件格式：

忍受不健全，为学习积攒动力，等你学成归来，所有都可以根据你的需要定制。并且，在你充分的理解后，你将做出取舍，选择你真正需要的，而不是看起来美好，其实没什么用的功能。

preview预览，改字体大小
